g->getOrder()
g->addEdge(nodeA,nodeB)
g->removeEdge(nodeA,nodeB)
g->addNode()
g->removeNode(node)
g->isSuccessor(nodeA,nodeB)
g->successors(node)
g->numberSuccessors(node)
g->isPredecessor(nodeA,nodeB)
g->predecessors(node)
g->numberPredecessors(node)
g->isNeighbor(nodeA,nodeB)
g->neighbors(node)
g->numberNeighbors(node)
g->getEdgeValue(nodeA,nodeB)
g->setEdgeValue(nodeA,nodeB,value)
g->getEdgeState(nodeA,nodeB)
g->setEdgeState(nodeA,nodeB,state)
g->isSymmetric(nodeA,nodeB)
g->getEdges()
g->getSummits()
g->setState(node,state)
g->getState(node)
g->setTag(node,tag)
g->getTag(node)
g->getName()
g->setName(name)
au->changeFlagInteraction(flag);
au->changeSpeed(time);
au->getName();
au->_sleep(time);
au->initAlgo(g);
au->chooseNode(g,nodes);
au->setNodeSelected(node);
au->notify(g);

